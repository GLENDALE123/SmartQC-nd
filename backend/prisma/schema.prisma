generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  password       String
  role           UserRole  @default(operator)
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authType       String?   @default("local")
  inspectionType String?
  lastLoginAt    DateTime?
  name           String
  position       String?
  processLine    String?
  rank           String?
}

model DefectType {
  id                        Int                        @id @default(autoincrement())
  name                      String                     @unique
  description               String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  color                     String?
  incomingInspectionDefects IncomingInspectionDefect[]
  processInspectionDefects  ProcessInspectionDefect[]
  shipmentInspectionDefects ShipmentInspectionDefect[]
}

model UploadLog {
  id           Int      @id @default(autoincrement())
  userId       Int?
  fileName     String
  successCount Int
  failedCount  Int
  results      Json
  createdAt    DateTime @default(now())
}

model Order {
  col0             Int      @id
  year             Int?
  month            Int?
  day              Int?
  category         String?
  finalorderNumber String?
  orderNumber      String?
  code             String?
  registration     String?
  col2             String?
  customer         String?
  productName      String?
  partName         String?
  quantity         Int?
  specification    String?
  postProcess      String?
  production       Int?
  remaining        Int?
  status           String?
  sample           String?
  shippingDate     String?
  dDay             String?
  manager          String?
  shipping         String?
  jig              String?
  registration2    String?
  category2        String?
  unitPrice        Int?
  orderAmount      Int?
  etc              String?
  category3        String?
  salesManager     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model IncomingInspection {
  id             Int                        @id @default(autoincrement())
  inspectionDate DateTime
  totalQty       Int
  defectQty      Int
  notes          String?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  status         InspectionDraftStatus      @default(draft)
  client         String?
  manager        String?
  orderNumbers   String[]
  partName       String?
  productName    String?
  specification  String?
  attachments    Attachment[]
  defects        IncomingInspectionDefect[]
}

model IncomingInspectionDefect {
  id           Int                @id @default(autoincrement())
  inspectionId Int
  defectTypeId Int?
  customType   String?
  count        Int
  details      Json?
  defectType   DefectType?        @relation(fields: [defectTypeId], references: [id])
  inspection   IncomingInspection @relation(fields: [inspectionId], references: [id])
}

model ProcessInspection {
  id             Int                       @id @default(autoincrement())
  inspectionDate DateTime
  totalQty       Int
  defectQty      Int
  notes          String?
  paintPrimer    String?
  paintTopcoat   String?
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  afterPack      String?
  colorDiff      String?
  extraWork      String?
  injectionPack  String?
  irCond         String?
  jig            String?
  line           String?
  lineSpeed      String?
  peelingTest    String?
  spindleRatio   String?
  subLine        String?
  uvCond         String?
  status         InspectionDraftStatus     @default(draft)
  client         String?
  manager        String?
  orderNumbers   String[]
  partName       String?
  productName    String?
  specification  String?
  attachments    Attachment[]
  defects        ProcessInspectionDefect[]
  rounds         ProcessInspectionRound[]
}

model ProcessInspectionRound {
  id           Int               @id @default(autoincrement())
  inspectionId Int
  label        String
  qty          Int
  inspection   ProcessInspection @relation(fields: [inspectionId], references: [id])
}

model ProcessInspectionDefect {
  id           Int               @id @default(autoincrement())
  inspectionId Int
  defectTypeId Int?
  customType   String?
  count        Int
  details      Json?
  defectType   DefectType?       @relation(fields: [defectTypeId], references: [id])
  inspection   ProcessInspection @relation(fields: [inspectionId], references: [id])
}

model ShipmentInspection {
  id             Int                       @id @default(autoincrement())
  inspectionDate DateTime
  totalQty       Int
  defectQty      Int
  notes          String?
  finalPeeling   String?
  externalCheck  Boolean?
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  status         InspectionDraftStatus     @default(draft)
  client         String?
  manager        String?
  orderNumbers   String[]
  partName       String?
  productName    String?
  specification  String?
  attachments    Attachment[]
  rounds         ShipmentInspectionRound[]
}

model ShipmentInspectionRound {
  id           Int                        @id @default(autoincrement())
  inspectionId Int
  date         DateTime
  qty          Int
  defectQty    Int
  inspection   ShipmentInspection         @relation(fields: [inspectionId], references: [id])
  workers      ShipmentInspectionWorker[]
}

model ShipmentInspectionWorker {
  id      Int                        @id @default(autoincrement())
  roundId Int
  name    String
  defects ShipmentInspectionDefect[]
  round   ShipmentInspectionRound    @relation(fields: [roundId], references: [id])
}

model ShipmentInspectionDefect {
  id           Int                      @id @default(autoincrement())
  workerId     Int
  defectTypeId Int?
  customType   String?
  count        Int
  details      Json?
  defectType   DefectType?              @relation(fields: [defectTypeId], references: [id])
  worker       ShipmentInspectionWorker @relation(fields: [workerId], references: [id])
}

model Attachment {
  id                   Int                 @id @default(autoincrement())
  url                  String
  fileName             String
  createdAt            DateTime            @default(now())
  incomingInspectionId Int?
  processInspectionId  Int?
  shipmentInspectionId Int?
  incomingInspection   IncomingInspection? @relation(fields: [incomingInspectionId], references: [id])
  processInspection    ProcessInspection?  @relation(fields: [processInspectionId], references: [id])
  shipmentInspection   ShipmentInspection? @relation(fields: [shipmentInspectionId], references: [id])
}

enum UserRole {
  admin
  inspector
  manager
  operator
}

enum InspectionStatus {
  pending
  in_progress
  passed
  failed
  cancelled
}

enum InspectionDraftStatus {
  draft
  completed
}

enum InspectionType {
  visual
  measurement
  functional
  safety
}
