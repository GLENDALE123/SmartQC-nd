import { useState, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Progress } from "@/components/ui/progress";
import { Upload, FileSpreadsheet, CheckCircle, AlertCircle, Clock, X, Zap } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { useExcelProcessor } from "@/hooks/useExcelProcessor";
import { useWebWorkerExcel } from "@/hooks/useWebWorkerExcel";
import { formatFileSize, estimateProcessingTime } from "@/utils/excel-validator";
import { ChunkUploader, ChunkUploadProgress } from "@/utils/chunk-uploader";

interface UploadProgress {
  uploadId: string;
  stage: 'parsing' | 'validating' | 'processing' | 'completed' | 'error';
  progress: number;
  message: string;
  processedRows?: number;
  totalRows?: number;
  currentBatch?: number;
  totalBatches?: number;
  processedChunks?: number;
  totalChunks?: number;
  details?: {
    created: number;
    updated: number;
    skipped: number;
    failed: number;
  };
}

export default function OptimizedExcelImport() {
  const [importFile, setImportFile] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState<UploadProgress | null>(null);
  const [importMessage, setImportMessage] = useState<string>("");
  const [messageType, setMessageType] = useState<"success" | "error" | "info">("info");
  const [useClientProcessing, setUseClientProcessing] = useState(true);
  const [useWebWorker, setUseWebWorker] = useState(true);
  const [useChunkUpload, setUseChunkUpload] = useState(true);
  
  // Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú ÏÉÅÌÉú
  const [chunkProgress, setChunkProgress] = useState<ChunkUploadProgress | null>(null);
  const [chunkUploader, setChunkUploader] = useState<ChunkUploader | null>(null);

  const {
    isValidating,
    isProcessing,
    validationResult,
    processResult,
    error: processingError,
    validateFile,
    processFile,
    reset
  } = useExcelProcessor();

  const {
    state: workerState,
    validateFile: workerValidateFile,
    parseFile: workerParseFile,
    chunkData: workerChunkData,
    reset: workerReset
  } = useWebWorkerExcel();

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Í∏∞Î≥∏ Í≤ÄÏ¶ù
    if (!file.name.match(/\.(xlsx|xls)$/)) {
      setImportMessage("ÏóëÏÖÄ ÌååÏùº(.xlsx, .xls)Îßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.");
      setMessageType("error");
      return;
    }

    if (file.size > 10 * 1024 * 1024) {
      setImportMessage("ÌååÏùº ÌÅ¨Í∏∞Îäî 10MB Ïù¥ÌïòÏó¨Ïïº Ìï©ÎãàÎã§.");
      setMessageType("error");
      return;
    }

    setImportFile(file);
    reset();
    workerReset();
    setImportMessage("");

    // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏° ÏÇ¨Ï†Ñ Í≤ÄÏ¶ù ÌôúÏÑ±Ìôî Ïãú
    if (useClientProcessing) {
      try {
        let validation;
        
        // Ïõπ ÏõåÏª§ ÏÇ¨Ïö© Ïó¨Î∂ÄÏóê Îî∞Î•∏ Î∂ÑÍ∏∞ Ï≤òÎ¶¨
        if (useWebWorker && workerState.isReady) {
          setImportMessage("Ïõπ ÏõåÏª§Î°ú ÌååÏùº Í≤ÄÏ¶ù Ï§ë...");
          validation = await workerValidateFile(file);
        } else {
          setImportMessage("Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú ÌååÏùº Í≤ÄÏ¶ù Ï§ë...");
          validation = await validateFile(file);
        }
        
        if (!validation.isValid) {
          setImportMessage(`ÌååÏùº Í≤ÄÏ¶ù Ïã§Ìå®:\n${validation.errors.join('\n')}`);
          setMessageType("error");
          return;
        }

        if (validation.warnings.length > 0) {
          setImportMessage(`Í≤ΩÍ≥†ÏÇ¨Ìï≠:\n${validation.warnings.join('\n')}`);
          setMessageType("info");
        } else {
          setImportMessage("ÌååÏùº Í≤ÄÏ¶ù ÏôÑÎ£å ‚úì");
          setMessageType("success");
        }

      } catch (error: any) {
        setImportMessage(`ÌååÏùº Í≤ÄÏ¶ù Ï§ë Ïò§Î•ò: ${error?.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
        setMessageType("error");
      }
    }
  };

  const handleOptimizedUpload = useCallback(async () => {
    if (!importFile) {
      setImportMessage("ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
      setMessageType("error");
      return;
    }

    setIsUploading(true);
    setUploadProgress(null);
    setChunkProgress(null);
    setImportMessage("ÏóÖÎ°úÎìú Ï§ÄÎπÑ Ï§ë...");
    setMessageType("info");

    try {
      let preProcessedData = null;
      let validationSummary = null;

      // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏° ÏÇ¨Ï†Ñ Ï≤òÎ¶¨
      if (useClientProcessing && (validationResult?.isValid || workerState.result?.isValid)) {
        
        // Ïõπ ÏõåÏª§ ÏÇ¨Ïö© Ïó¨Î∂ÄÏóê Îî∞Î•∏ Î∂ÑÍ∏∞ Ï≤òÎ¶¨
        if (useWebWorker && workerState.isReady) {
          setImportMessage("Ïõπ ÏõåÏª§Î°ú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ï†Ñ Ï≤òÎ¶¨ Ï§ë...");
          
          // Ïõπ ÏõåÏª§Î°ú ÌååÏùº ÌååÏã±
          const parseResult = await workerParseFile(importFile);
          
          if (parseResult.data && parseResult.data.length > 0) {
            // Îç∞Ïù¥ÌÑ∞ Ï≤≠ÌÅ¨ Î∂ÑÌï† (1000Í±¥Ïî©)
            const chunkResult = await workerChunkData(parseResult.data, 1000);
            
            preProcessedData = parseResult.data;
            validationSummary = {
              total: parseResult.data.length,
              valid: parseResult.validCount || parseResult.data.length,
              invalid: parseResult.invalidCount || 0,
              chunks: chunkResult.chunks || []
            };
            
            setImportMessage(`Ïõπ ÏõåÏª§ ÏÇ¨Ï†Ñ Ï≤òÎ¶¨ ÏôÑÎ£å: Ïú†Ìö® ${validationSummary.valid}Í±¥, Î¨¥Ìö® ${validationSummary.invalid}Í±¥`);
          }
          
        } else {
          setImportMessage("Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ï†Ñ Ï≤òÎ¶¨ Ï§ë...");
          
          const processedResult = await processFile(importFile);
          preProcessedData = processedResult.validData;
          validationSummary = processedResult.summary;

          setImportMessage(`ÏÇ¨Ï†Ñ Ï≤òÎ¶¨ ÏôÑÎ£å: Ïú†Ìö® ${processedResult.summary.valid}Í±¥, Î¨¥Ìö® ${processedResult.summary.invalid}Í±¥`);
        }
      }

      // Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú ÏÇ¨Ïö© Ïó¨Î∂ÄÏóê Îî∞Î•∏ Î∂ÑÍ∏∞
      if (useChunkUpload && preProcessedData && preProcessedData.length > 1000) {
        // Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú Ïã§Ìñâ
        const optimalChunkSize = ChunkUploader.calculateOptimalChunkSize(
          preProcessedData.length
        );
        const optimalConcurrency = ChunkUploader.calculateOptimalConcurrency(
          Math.ceil(preProcessedData.length / optimalChunkSize)
        );

        const uploader = new ChunkUploader({
          chunkSize: optimalChunkSize,
          maxConcurrentUploads: optimalConcurrency,
          retryAttempts: 3,
          retryDelay: 1000
        });

        setChunkUploader(uploader);

        setImportMessage("Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú ÏãúÏûë...");

        const chunkResult = await uploader.uploadChunks(
          preProcessedData,
          importFile.name,
          importFile.size,
          (progress: ChunkUploadProgress) => {
            setChunkProgress(progress);
            setImportMessage(progress.message);
          }
        );

        if (chunkResult.success) {
          // ÏÉÅÏÑ∏Ìïú ÏÑ±Í≥µ Î©îÏãúÏßÄ Ìè¨Îß∑ÌåÖ
          const { results } = chunkResult;
          if (results) {
            const successMessage = `‚úÖ Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú ÏôÑÎ£å!\n\n` +
              `üìä Ï≤òÎ¶¨ Í≤∞Í≥º:\n` +
              `‚Ä¢ ÏÉùÏÑ±: ${results.created}Í±¥\n` +
              `‚Ä¢ ÏóÖÎç∞Ïù¥Ìä∏: ${results.updated}Í±¥\n` +
              `‚Ä¢ Ï§ëÎ≥µ Ïä§ÌÇµ: ${results.skipped}Í±¥\n` +
              `‚Ä¢ Ïã§Ìå®: ${results.fail}Í±¥\n\n` +
              `Ï¥ù ÏÑ±Í≥µ: ${results.created + results.updated + results.skipped}Í±¥\n` +
              `Ï≤òÎ¶¨Îêú Ï≤≠ÌÅ¨: ${chunkResult.totalChunks}Í∞ú`;
            
            setImportMessage(successMessage);
          } else {
            setImportMessage(`‚úÖ Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú ÏôÑÎ£å! Ï¥ù ${chunkResult.totalChunks}Í∞ú Ï≤≠ÌÅ¨ Ï≤òÎ¶¨`);
          }
          setMessageType("success");
          
          // ÌååÏùº ÏûÖÎ†• Ï¥àÍ∏∞Ìôî
          setImportFile(null);
          reset();
          workerReset();
          const fileInput = document.getElementById('optimized-excel-file') as HTMLInputElement;
          if (fileInput) fileInput.value = '';
        } else {
          throw new Error(chunkResult.error || "Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú Ïã§Ìå®");
        }
      } else {
        // Í∏∞Ï°¥ ÏùºÍ¥Ñ ÏóÖÎ°úÎìú
        const formData = new FormData();
        formData.append('file', importFile);
        
        if (preProcessedData) {
          formData.append('preProcessedData', JSON.stringify(preProcessedData));
          formData.append('validationSummary', JSON.stringify(validationSummary));
        }

        // ÏóÖÎ°úÎìú ÏãúÏûë
        const uploadResponse = await fetch('/api/upload/optimized/excel-orders', {
          method: 'POST',
          body: formData,
        });

        if (!uploadResponse.ok) {
          throw new Error(`ÏóÖÎ°úÎìú Ïã§Ìå®: ${uploadResponse.statusText}`);
        }

        const uploadResult = await uploadResponse.json();
        const uploadId = uploadResult.data.uploadId;

        // SSEÎ°ú Ïã§ÏãúÍ∞Ñ ÏßÑÌñâÎ•† ÏàòÏã†
        const eventSource = new EventSource(`/api/upload/optimized/progress/${uploadId}`);
        
        eventSource.onmessage = (event) => {
          try {
            const progress: UploadProgress = JSON.parse(event.data);
            setUploadProgress(progress);
            setImportMessage(progress.message);

            if (progress.stage === 'completed') {
              setMessageType("success");
              setIsUploading(false);
              eventSource.close();
              
              // ÏÑ±Í≥µ Î©îÏãúÏßÄ Ìè¨Îß∑ÌåÖ
              const { details } = progress;
              if (details) {
                const successMessage = `‚úÖ ÏóÖÎ°úÎìú ÏôÑÎ£å!\n\n` +
                  `üìä Ï≤òÎ¶¨ Í≤∞Í≥º:\n` +
                  `‚Ä¢ ÏÉùÏÑ±: ${details.created}Í±¥\n` +
                  `‚Ä¢ ÏóÖÎç∞Ïù¥Ìä∏: ${details.updated}Í±¥\n` +
                  `‚Ä¢ Ï§ëÎ≥µ Ïä§ÌÇµ: ${details.skipped}Í±¥\n` +
                  `‚Ä¢ Ïã§Ìå®: ${details.failed}Í±¥\n\n` +
                  `Ï¥ù ÏÑ±Í≥µ: ${details.created + details.updated + details.skipped}Í±¥`;
                
                setImportMessage(successMessage);
              }

              // ÌååÏùº ÏûÖÎ†• Ï¥àÍ∏∞Ìôî
              setImportFile(null);
              reset();
              workerReset();
              const fileInput = document.getElementById('optimized-excel-file') as HTMLInputElement;
              if (fileInput) fileInput.value = '';

            } else if (progress.stage === 'error') {
              setMessageType("error");
              setIsUploading(false);
              eventSource.close();
            }

          } catch (error) {
            console.error('ÏßÑÌñâÎ•† ÌååÏã± Ïò§Î•ò:', error);
          }
        };

        eventSource.onerror = (error) => {
          console.error('SSE Ïó∞Í≤∞ Ïò§Î•ò:', error);
          setImportMessage("ÏßÑÌñâÎ•† ÏàòÏã† Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
          setMessageType("error");
          setIsUploading(false);
          eventSource.close();
        };
      }

    } catch (error: any) {
      setIsUploading(false);
      setUploadProgress(null);
      setChunkProgress(null);
      
      let errorMessage = "‚ùå ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.";
      if (error.message) {
        errorMessage += `\n\nÏÉÅÏÑ∏: ${error.message}`;
      }
      
      setImportMessage(errorMessage);
      setMessageType("error");
    } finally {
      setChunkUploader(null);
    }
  }, [importFile, useClientProcessing, useWebWorker, useChunkUpload, validationResult, workerState, workerParseFile, workerChunkData, processFile, reset, workerReset]);

  const cancelUpload = async () => {
    if (uploadProgress?.uploadId) {
      try {
        await fetch(`/api/upload/optimized/${uploadProgress.uploadId}`, {
          method: 'DELETE'
        });
        
        setIsUploading(false);
        setUploadProgress(null);
        setImportMessage("ÏóÖÎ°úÎìúÍ∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.");
        setMessageType("info");
      } catch (error) {
        console.error('ÏóÖÎ°úÎìú Ï∑®ÏÜå Ïã§Ìå®:', error);
      }
    }
  };

  const getStageIcon = (stage: string) => {
    switch (stage) {
      case 'completed': return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'error': return <AlertCircle className="w-4 h-4 text-red-600" />;
      case 'processing': return <Clock className="w-4 h-4 text-blue-600" />;
      default: return <Clock className="w-4 h-4 text-gray-600" />;
    }
  };

  const getStageText = (stage: string) => {
    switch (stage) {
      case 'parsing': return 'ÌååÏùº ÌååÏã±';
      case 'validating': return 'Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù';
      case 'processing': return 'Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨';
      case 'completed': return 'ÏôÑÎ£å';
      case 'error': return 'Ïò§Î•ò';
      default: return 'ÎåÄÍ∏∞';
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-lg">
          <FileSpreadsheet className="w-5 h-5" />
          ÏµúÏ†ÅÌôîÎêú ÏóëÏÖÄ Í∞ÄÏ†∏Ïò§Í∏∞
          <Badge variant="secondary" className="ml-2">
            {useClientProcessing ? 
              (useWebWorker ? "Ïõπ ÏõåÏª§ Î™®Îìú" : "Í≥†ÏÜç Î™®Îìú") : 
              "ÌëúÏ§Ä Î™®Îìú"
            }
          </Badge>
          {useWebWorker && (
            <Badge variant={workerState.isReady ? "default" : "destructive"} className="ml-1">
              <Zap className="w-3 h-3 mr-1" />
              {workerState.isReady ? "ÏõåÏª§ Ï§ÄÎπÑ" : "ÏõåÏª§ Î°úÎî©"}
            </Badge>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        
        {/* Ï≤òÎ¶¨ Î™®Îìú ÏÑ†ÌÉù */}
        <div className="space-y-4">
          <div className="flex items-center space-x-4">
            <Label className="text-sm font-medium">Ï≤òÎ¶¨ Î™®Îìú:</Label>
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="client-processing"
                checked={useClientProcessing}
                onChange={(e) => setUseClientProcessing(e.target.checked)}
                className="rounded"
              />
              <Label htmlFor="client-processing" className="text-sm">
                ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ï†Ñ Ï≤òÎ¶¨ (Îπ†Î•∏ ÏóÖÎ°úÎìú)
              </Label>
            </div>
          </div>

          {/* Ïõπ ÏõåÏª§ ÏòµÏÖò */}
          {useClientProcessing && (
            <div className="ml-4 space-y-3 border-l-2 border-blue-200 pl-4">
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="web-worker"
                  checked={useWebWorker}
                  onChange={(e) => setUseWebWorker(e.target.checked)}
                  className="rounded"
                />
                <Label htmlFor="web-worker" className="text-sm">
                  Ïõπ ÏõåÏª§ ÏÇ¨Ïö© (Î©îÏù∏ Ïä§Î†àÎìú Ï∞®Îã® Î∞©ÏßÄ)
                </Label>
                <Zap className="h-4 w-4 text-yellow-500" />
                {useWebWorker && (
                  <Badge 
                    variant={workerState.isReady ? "default" : "secondary"} 
                    className="text-xs"
                  >
                    {workerState.isReady ? "Ï§ÄÎπÑÎê®" : "Î°úÎî© Ï§ë..."}
                  </Badge>
                )}
              </div>

              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="chunk-upload"
                  checked={useChunkUpload}
                  onChange={(e) => setUseChunkUpload(e.target.checked)}
                  className="rounded"
                />
                <Label htmlFor="chunk-upload" className="text-sm">
                  Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú (ÎåÄÏö©Îüâ ÌååÏùº ÏµúÏ†ÅÌôî)
                </Label>
                <Badge variant="outline" className="text-xs">
                  1000Ìñâ Ïù¥ÏÉÅ
                </Badge>
              </div>
            </div>
          )}

          {/* Ïõπ ÏõåÏª§ ÏßÑÌñâÎ•† ÌëúÏãú */}
          {useWebWorker && workerState.isProcessing && (
            <div className="ml-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <Zap className="w-4 h-4 text-blue-600" />
                <span className="text-sm font-medium text-blue-800">Ïõπ ÏõåÏª§ Ï≤òÎ¶¨ Ï§ë</span>
              </div>
              <Progress value={workerState.progress} className="mb-1" />
              <p className="text-xs text-blue-600">{workerState.message}</p>
            </div>
          )}
        </div>

        {/* ÌååÏùº ÏÑ†ÌÉù */}
        <div className="space-y-4">
          <div>
            <Label htmlFor="optimized-excel-file">ÏóëÏÖÄ ÌååÏùº ÏÑ†ÌÉù</Label>
            <Input
              id="optimized-excel-file"
              type="file"
              accept=".xlsx,.xls"
              onChange={handleFileChange}
              disabled={isUploading || isValidating}
              className="mt-1"
            />
          </div>

          {/* ÌååÏùº Ï†ïÎ≥¥ ÌëúÏãú */}
          {importFile && (
            <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-2">
                  <FileSpreadsheet className="w-4 h-4 text-blue-600" />
                  <div>
                    <p className="text-sm font-medium text-blue-800">
                      {importFile.name}
                    </p>
                    <p className="text-xs text-blue-600">
                      ÌÅ¨Í∏∞: {formatFileSize(importFile.size)}
                    </p>
                    {validationResult && (
                      <p className="text-xs text-blue-600">
                        ÏòàÏÉÅ Ï≤òÎ¶¨ ÏãúÍ∞Ñ: {estimateProcessingTime(validationResult.rowCount)}
                      </p>
                    )}
                  </div>
                </div>
                
                {/* Í≤ÄÏ¶ù ÏÉÅÌÉú */}
                {isValidating && (
                  <Badge variant="outline" className="text-blue-600">
                    Í≤ÄÏ¶ù Ï§ë...
                  </Badge>
                )}
                {validationResult?.isValid && (
                  <Badge variant="outline" className="text-green-600">
                    ‚úì Í≤ÄÏ¶ù ÏôÑÎ£å
                  </Badge>
                )}
              </div>

              {/* Í≤ÄÏ¶ù Í≤∞Í≥º ÏÉÅÏÑ∏ */}
              {validationResult && (
                <div className="mt-3 pt-3 border-t border-blue-200">
                  <p className="text-xs text-blue-700">
                    Ï¥ù {validationResult.rowCount}Ìñâ Îç∞Ïù¥ÌÑ∞
                  </p>
                  {processResult && (
                    <div className="mt-1 text-xs text-blue-700">
                      Ïú†Ìö®: {processResult.summary.valid}Í±¥, 
                      Î¨¥Ìö®: {processResult.summary.invalid}Í±¥
                    </div>
                  )}
                </div>
              )}
            </div>
          )}

          {/* ÏóÖÎ°úÎìú ÏßÑÌñâÎ•† */}
          {uploadProgress && (
            <div className="p-4 bg-gray-50 border rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  {getStageIcon(uploadProgress.stage)}
                  <span className="text-sm font-medium">
                    {getStageText(uploadProgress.stage)}
                  </span>
                </div>
                
                {isUploading && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={cancelUpload}
                    className="h-6 px-2"
                  >
                    <X className="w-3 h-3" />
                  </Button>
                )}
              </div>

              <Progress value={uploadProgress.progress} className="mb-2" />
              
              <div className="text-xs text-gray-600">
                {uploadProgress.processedRows && uploadProgress.totalRows && (
                  <div>
                    ÏßÑÌñâÎ•†: {uploadProgress.processedRows}/{uploadProgress.totalRows} 
                    ({Math.round((uploadProgress.processedRows / uploadProgress.totalRows) * 100)}%)
                  </div>
                )}
                {uploadProgress.currentBatch && uploadProgress.totalBatches && (
                  <div>
                    Î∞∞Ïπò: {uploadProgress.currentBatch}/{uploadProgress.totalBatches}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú ÏßÑÌñâÎ•† */}
          {chunkProgress && (
            <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-600" />
                  <span className="text-sm font-medium text-green-800">
                    Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú ÏßÑÌñâ
                  </span>
                </div>
                
                {chunkUploader && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => chunkUploader.abort()}
                    className="h-6 px-2"
                  >
                    <X className="w-3 h-3" />
                  </Button>
                )}
              </div>

              <Progress value={chunkProgress.progress} className="mb-2" />
              
              <div className="text-xs text-green-700">
                <div className="flex justify-between">
                  <span>{chunkProgress.message}</span>
                  <span>{chunkProgress.progress}%</span>
                </div>
                <div className="flex space-x-4 mt-1">
                  <span>ÏôÑÎ£å: {chunkProgress.completedChunks}</span>
                  <span>Ï†ÑÏ≤¥: {chunkProgress.totalChunks}</span>
                  <span>ÌòÑÏû¨: {chunkProgress.currentChunk}</span>
                </div>
              </div>
            </div>
          )}

          {/* ÏóÖÎ°úÎìú Î≤ÑÌäº */}
          <div className="flex justify-end">
            <Button 
              onClick={handleOptimizedUpload} 
              disabled={
                !importFile || 
                isUploading || 
                isValidating || 
                isProcessing ||
                (useWebWorker && !workerState.isReady) ||
                workerState.isProcessing ||
                !!chunkProgress
              }
              className="flex items-center gap-2"
              size="sm"
            >
              <Upload className="w-4 h-4" />
              {isUploading ? (chunkProgress ? "Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú Ï§ë..." : "ÏóÖÎ°úÎìú Ï§ë...") : 
               isValidating ? "Í≤ÄÏ¶ù Ï§ë..." :
               isProcessing ? "Ï≤òÎ¶¨ Ï§ë..." :
               workerState.isProcessing ? "Ïõπ ÏõåÏª§ Ï≤òÎ¶¨ Ï§ë..." :
               (useWebWorker && !workerState.isReady) ? "Ïõπ ÏõåÏª§ Ï§ÄÎπÑ Ï§ë..." :
               "ÏµúÏ†ÅÌôî ÏóÖÎ°úÎìú"}
            </Button>
          </div>

          {/* Î©îÏãúÏßÄ ÌëúÏãú */}
          {importMessage && (
            <Alert className={
              messageType === "success" ? "border-green-200 bg-green-50" :
              messageType === "error" ? "border-red-200 bg-red-50" :
              "border-blue-200 bg-blue-50"
            }>
              <AlertDescription className="whitespace-pre-line text-sm">
                {importMessage}
              </AlertDescription>
            </Alert>
          )}

          {/* Ï≤òÎ¶¨ ÏóêÎü¨ ÌëúÏãú */}
          {processingError && (
            <Alert className="border-red-200 bg-red-50">
              <AlertCircle className="w-4 h-4" />
              <AlertDescription>
                {processingError}
              </AlertDescription>
            </Alert>
          )}
        </div>

        {/* ÏÑ±Îä• ÎπÑÍµê Ï†ïÎ≥¥ */}
        <div className="p-4 bg-muted/50 rounded-lg border">
          <p className="text-sm font-medium mb-2">üí° ÏÑ±Îä• ÏµúÏ†ÅÌôî Ï†ïÎ≥¥:</p>
          <ul className="text-xs text-muted-foreground space-y-1">
            <li>‚Ä¢ <strong>Ïõπ ÏõåÏª§ Î™®Îìú:</strong> Î©îÏù∏ Ïä§Î†àÎìú Ï∞®Îã® ÏóÜÏù¥ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÌååÏùº Ï≤òÎ¶¨</li>
            <li>‚Ä¢ <strong>Í≥†ÏÜç Î™®Îìú:</strong> ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú ÏÇ¨Ï†Ñ Ï≤òÎ¶¨ÌïòÏó¨ ÏóÖÎ°úÎìú ÏãúÍ∞Ñ 50% Îã®Ï∂ï</li>
            <li>‚Ä¢ <strong>Ï≤≠ÌÅ¨ ÏóÖÎ°úÎìú:</strong> ÎåÄÏö©Îüâ ÌååÏùºÏùÑ ÏûëÏùÄ Îã®ÏúÑÎ°ú Î∂ÑÌï†ÌïòÏó¨ ÏïàÏ†ïÏ†Å ÏóÖÎ°úÎìú</li>
            <li>‚Ä¢ <strong>Î≥ëÎ†¨ Ï≤òÎ¶¨:</strong> Ïó¨Îü¨ Ï≤≠ÌÅ¨Î•º ÎèôÏãúÏóê ÏóÖÎ°úÎìúÌïòÏó¨ ÏÜçÎèÑ Ìñ•ÏÉÅ</li>
            <li>‚Ä¢ <strong>Ïû¨ÏãúÎèÑ Î©îÏª§ÎãàÏ¶ò:</strong> Ïã§Ìå®Ìïú Ï≤≠ÌÅ¨ ÏûêÎèô Ïû¨ÏãúÎèÑÎ°ú ÏïàÏ†ïÏÑ± Î≥¥Ïû•</li>
            <li>‚Ä¢ <strong>Ïã§ÏãúÍ∞Ñ ÏßÑÌñâÎ•†:</strong> Í∞Å Îã®Í≥ÑÎ≥Ñ ÏÉÅÏÑ∏Ìïú ÏßÑÌñâ ÏÉÅÌô© ÌëúÏãú</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
}