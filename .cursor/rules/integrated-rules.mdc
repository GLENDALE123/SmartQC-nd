---
alwaysApply: true
---

# 통합 프론트엔드 개발 규칙

## 1. 프로젝트 구조 및 아키텍처

### 1.1. Feature-Driven / Domain-Driven 구조
```
src/
├── App.tsx                 # 최상위 컴포넌트 및 라우팅 설정
├── assets/                 # 정적 자산 (이미지, 폰트, 아이콘)
├── components/             # 전역 재사용 UI 컴포넌트
│   └── ui/                # shadcn/ui 컴포넌트
├── features/              # 주요 기능별 모듈 (도메인별)
│   ├── auth/              # 인증 관련 기능
│   │   ├── components/    # 인증 전용 컴포넌트
│   │   ├── hooks/         # 인증 관련 커스텀 훅
│   │   ├── pages/         # 인증 관련 페이지
│   │   └── services/      # 인증 API 서비스
│   ├── products/          # 상품 관련 기능
│   └── users/             # 사용자 관련 기능
├── pages/                 # 페이지 컴포넌트
├── layouts/               # 레이아웃 컴포넌트
├── hooks/                 # 전역 커스텀 훅
├── services/              # API 통신 로직
├── store/                 # 전역 상태 관리
├── styles/                # 전역 스타일 및 테마
├── utils/                 # 유틸리티 함수
├── types/                 # TypeScript 타입 정의
├── lib/                   # 라이브러리 설정
└── main.tsx               # 애플리케이션 진입점
```

### 1.2. 컴포넌트 분류 원칙

**components/ 폴더:**
- 전역에서 재사용 가능한 독립적인 UI 컴포넌트
- 예시: Button, Modal, InputField, LoadingSpinner
- shadcn/ui 컴포넌트는 `components/ui/` 하위에 배치

**features/[featureName]/components/ 폴더:**
- 특정 기능에만 사용되는 컴포넌트
- 다른 기능에서 직접 import 금지
- 재사용성이 높아지면 전역 components/로 이동 고려

**features/[featureName]/pages/ 폴더:**
- 기능별 최상위 뷰 컴포넌트
- React Router의 Route와 직접 연결
- 레이아웃 컴포넌트 내부에서 렌더링

## 2. 컴포넌트 관리 및 개발 원칙

### 2.1. 컴포넌트 분리 규칙
- 모든 UI 요소는 재사용 가능한 컴포넌트로 분리
- 각 컴포넌트는 단일 책임 원칙 준수
- props 인터페이스를 명확히 정의
- 컴포넌트 크기는 작고 집중적으로 유지

### 2.2. 프레젠테이션/컨테이너 분리
- UI 표시 로직과 데이터 처리 로직 분리
- Presentational Component: 순수 UI 렌더링
- Container Component: 데이터 처리 및 상태 관리

### 2.3. 단방향 데이터 흐름
- 부모에서 자식으로만 데이터 전달
- 상태 끌어올리기 (Lifting State Up) 활용
- 예측 가능한 데이터 흐름 유지

### 2.4. 컴포넌트 생성 및 사용 규칙
- 사용자가 UI 기능을 요청했을 때, 해당 기능이 기존 컴포넌트로 구현되지 않는다면:
  1. **먼저 독립적인 컴포넌트를 생성**
  2. **그 다음 페이지/레이아웃에서 해당 컴포넌트를 import하여 사용**

**예시**:
```
사용자 요청: "하단 네비게이션 만들어줘"
→ 1단계: src/components/BottomNavigation.tsx 생성
→ 2단계: src/layouts/MainLayout.tsx에서 BottomNavigation 사용
```

**컴포넌트 배치 기준**:
- **전역 컴포넌트** (`src/components/`): 여러 페이지에서 재사용될 가능성이 높은 컴포넌트
- **기능별 컴포넌트** (`src/features/[featureName]/components/`): 특정 기능에서만 사용되는 컴포넌트

**컴포넌트 생성 순서**:
1. 컴포넌트 파일 생성 (TypeScript + CSS Modules 권장)
2. Props 인터페이스 정의
3. 기본 스타일링 적용
4. 페이지/레이아웃에서 import 및 사용
5. 필요시 스타일 조정

## 3. 디자인 토큰 활용 강제 (새로운 규칙)

### 3.1. 하드코딩 금지
- 모든 시각적 속성은 디자인 토큰 변수 사용
- 색상: `#FFFFFF` → `var(--color-white)` 또는 Tailwind 클래스
- 폰트 크기: `16px` → `var(--font-size-base)` 또는 Tailwind 클래스
- 간격: `20px` → `var(--spacing-md)` 또는 Tailwind 클래스

### 3.2. 토큰 정의 규칙
- 새로운 컴포넌트 생성 시 필요한 토큰 먼저 정의
- `src/styles/tokens.ts` 또는 `tailwind.config.js`에 정의
- 토큰명은 의미를 명확히 전달하는 이름 사용
- 주석으로 토큰의 목적과 사용 예시 명시

### 3.3. Tailwind CSS 토큰 확장
- `tailwind.config.js`의 theme 설정을 확장하여 커스텀 토큰 정의
- 색상 팔레트, 간격, 폰트 크기 등을 체계적으로 정의
- 일관된 디자인 시스템 구축

## 4. 네이밍 규칙

### 4.1. 파일/폴더 네이밍
- **컴포넌트 파일**: PascalCase (Button.tsx, UserProfile.tsx)
- **유틸리티 파일**: camelCase (formatDate.ts, apiClient.ts)
- **상수 파일**: UPPER_SNAKE_CASE (API_ENDPOINTS.ts)
- **타입 파일**: camelCase (userTypes.ts, apiTypes.ts)

### 4.2. 변수/함수 네이밍
- **변수명, 함수명**: camelCase (userName, handleClick)
- **상수**: UPPER_SNAKE_CASE (API_BASE_URL, MAX_RETRY_COUNT)
- **컴포넌트명**: PascalCase (UserCard, ProductList)
- **약어 사용 지양**: 명확한 의미 전달 우선

## 5. 환경 설정 및 자동화

### 5.1. 환경 변수 관리
- 민감하거나 변경 가능한 값은 .env 파일에 정의
- API 엔드포인트: `VITE_API_BASE_URL`
- 환경 구분: `VITE_NODE_ENV`
- 외부 서비스 키: `VITE_GOOGLE_ANALYTICS_ID`

### 5.2. 설정 파일 포함
- 코드 컨벤션 자동화 파일 포함
- `.eslintrc.cjs`: ESLint 설정
- `prettier.config.cjs`: Prettier 설정
- `.editorconfig`: 에디터 설정
- `tsconfig.json`: TypeScript 설정

### 5.3. Vite 특화 설정
- 절대 경로 import 설정 (`@/` alias)
- 환경 변수는 `VITE_` 접두사 필수
- ESM 모듈 시스템 우선 사용
- HMR 경계 이해 및 활용

## 6. 타입 안정성 (새로운 규칙)

### 6.1. 타입 정의 규칙
- 모든 데이터 구조에 명확한 타입 정의
- 컴포넌트 props: interface 또는 type 사용
- API 응답 데이터: 명시적 타입 정의
- 전역 상태: 타입 안전성 보장

### 6.2. any 타입 사용 제한
- any 타입 사용은 특별한 경우만 허용
- 외부 라이브러리와의 호환성
- 동적 데이터 처리
- 마이그레이션 과정에서의 임시 사용

### 6.3. 타입 파일 관리
- `src/types/` 폴더에 공통 타입 정의
- 컴포넌트별 타입은 해당 파일 내부에 정의
- 재사용 가능한 타입은 별도 파일로 분리

## 7. 의존성 관리 (새로운 규칙)

### 7.1. 핵심 의존성만 포함
- 베이스 프로젝트에는 필수 라이브러리만 포함
- React, React DOM, TypeScript, Vite, Tailwind CSS, shadcn/ui

### 7.2. 선택적 의존성 분리
- 특정 기능 라이브러리는 필요시 추가
- 상태 관리: Zustand, Recoil, Redux Toolkit
- 라우팅: React Router DOM
- 폼 관리: React Hook Form
- API 클라이언트: Axios, TanStack Query

### 7.3. 의존성 문서화
- package.json에 각 라이브러리의 역할 명시
- 주석으로 라이브러리 목적 설명
- 버전 관리 전략 명시

## 8. 문서화 및 주석 (새로운 규칙)

### 8.1. 컴포넌트 문서화
- 각 컴포넌트 파일 상단에 문서화
- 컴포넌트의 역할과 목적
- props 인터페이스 설명
- 사용 예시 코드
- 주의사항이나 제약사항

### 8.2. 토큰 문서화
- 디자인 토큰에 대한 명확한 설명
- 각 토큰의 목적과 사용 맥락
- 사용 예시와 주의사항
- 관련 토큰들과의 관계

### 8.3. 복잡한 로직 주석
- 복잡한 비즈니스 로직에 상세한 주석
- 알고리즘의 동작 원리
- 성능 고려사항
- 향후 개선 방향

## 9. 성능 최적화

### 9.1. 번들 크기 최적화
- 불필요한 의존성 제거
- 코드 스플리팅 적용
- 트리 쉐이킹 활용
- 번들 분석 도구 활용

### 9.2. 렌더링 최적화
- React.memo, useMemo, useCallback 적절히 사용
- 불필요한 리렌더링 방지
- 가상화 적용 (긴 리스트)
- 메모이제이션 전략 수립

### 9.3. 이미지 최적화
- 적절한 이미지 포맷 사용 (WebP)
- 지연 로딩 적용
- 반응형 이미지 제공
- 이미지 압축 및 최적화

## 10. 접근성 및 사용성

### 10.1. 시맨틱 HTML 사용
- 의미있는 HTML 태그 사용
- ARIA 속성 적절히 활용
- 키보드 네비게이션 지원
- 스크린 리더 호환성

### 10.2. 반응형 디자인
- 모바일 우선 접근법
- 브레이크포인트 체계적 관리
- 터치 인터페이스 고려
- 다양한 디바이스 지원

## 11. 테스트 전략

### 11.1. 테스트 환경 설정
- Jest + React Testing Library 기본 설정
- 컴포넌트 테스트 우선
- 통합 테스트 및 E2E 테스트 고려

### 11.2. 테스트 커버리지
- 핵심 비즈니스 로직 우선 테스트
- 사용자 인터랙션 시나리오 테스트
- 에러 케이스 테스트
- 접근성 테스트 포함

## 12. 에러 처리 및 안정성

### 12.1. API 에러 처리
- try-catch 블록 또는 .catch() 메서드 사용
- 사용자 친화적인 에러 메시지 제공
- 재시도 로직 구현
- 네트워크 오류 대응

### 12.2. UI 에러 처리
- Error Boundaries 사용
- 예상치 못한 오류에 대한 폴백 UI 제공
- 로딩 상태 및 에러 상태 명확히 표시

### 12.3. 사용자 피드백
- 로딩 스피너, 성공 메시지, 에러 메시지 명확히 표시
- 사용자 혼란 최소화
- 토스트 알림 활용

## 13. 상태 관리 패턴

### 13.1. 상태 관리 솔루션 선택
- 프로젝트 규모와 팀 숙련도에 맞는 라이브러리 선택
- Recoil, Zustand, Jotai, Redux Toolkit 중 선택
- 선택한 솔루션의 베스트 프랙티스 준수

### 13.2. 상태 구조화
- 상태를 작은 독립적인 단위로 분할
- 관련 로직(selectors, reducers, actions)을 함께 관리
- 비동기 상태 업데이트 패턴 정의

### 13.3. 데이터 페칭 전략
- API 요청 함수를 `src/services/` 폴더에 통합
- React Query, SWR, Apollo Client 등 고려
- 캐싱, 재페칭, 로딩/에러 상태 관리

## 14. 폼 관리 전략

### 14.1. 폼 라이브러리 활용
- React Hook Form 또는 Formik 사용
- 검증, 입력 값 관리, 에러 메시지 표시 간소화
- React Hook Form의 성능 우수성 활용

### 14.2. 검증 전략
- 모든 폼 입력에 클라이언트 사이드 검증 적용
- Yup 또는 Zod와 같은 스키마 검증 라이브러리 통합
- 잘못된 데이터 제출 사전 방지

### 14.3. 제출 상태 관리
- 로딩, 성공, 에러 상태를 명확히 관리
- 사용자에게 피드백 제공
- 중복 제출 방지

## 15. 배포 및 CI/CD 자동화

### 15.1. CI/CD 파이프라인 구축
- 코드 변경 시 자동 빌드 및 테스트 실행
- GitHub Actions, GitLab CI, Jenkins 등 활용
- 통합 이슈 조기 발견

### 15.2. 자동 배포
- 테스트된 코드를 스테이징 또는 프로덕션 환경에 자동 배포
- 롤백 전략 수립
- 환경별 설정 분리

### 15.3. 환경 변수 관리
- 개발, 스테이징, 프로덕션 환경별 설정
- 민감한 정보 보안 유지
- 환경별 특성에 맞는 최적화
# 통합 프론트엔드 개발 규칙
- 민감한 정보 보안 유지
- 환경별 특성에 맞는 최적화
# 통합 프론트엔드 개발 규칙